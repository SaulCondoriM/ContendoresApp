{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor para manejar errores de red\napi.interceptors.response.use(response => response, error => {\n  console.error('API Error:', error);\n  return Promise.reject(error);\n});\nexport const gameService = {\n  // Obtener todos los juegos\n  getAllGames: async () => {\n    try {\n      const response = await api.get('/games');\n      return response.data;\n    } catch (error) {\n      throw new Error('Error al cargar los juegos');\n    }\n  },\n  // Obtener un juego específico\n  getGameById: async id => {\n    try {\n      const response = await api.get(`/games/${id}`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Error al cargar el juego');\n    }\n  },\n  // Crear un nuevo juego\n  createGame: async gameData => {\n    try {\n      const response = await api.post('/games', gameData);\n      return response.data;\n    } catch (error) {\n      throw new Error('Error al crear el juego');\n    }\n  },\n  // Actualizar un juego\n  updateGame: async (id, gameData) => {\n    try {\n      const response = await api.put(`/games/${id}`, gameData);\n      return response.data;\n    } catch (error) {\n      throw new Error('Error al actualizar el juego');\n    }\n  },\n  // Eliminar un juego\n  deleteGame: async id => {\n    try {\n      const response = await api.delete(`/games/${id}`);\n      return response.data;\n    } catch (error) {\n      throw new Error('Error al eliminar el juego');\n    }\n  }\n};\nexport const categoryService = {\n  // Obtener todas las categorías\n  getAllCategories: async () => {\n    try {\n      const response = await api.get('/categories');\n      return response.data;\n    } catch (error) {\n      throw new Error('Error al cargar las categorías');\n    }\n  },\n  // Crear una nueva categoría\n  createCategory: async categoryData => {\n    try {\n      const response = await api.post('/categories', categoryData);\n      return response.data;\n    } catch (error) {\n      throw new Error('Error al crear la categoría');\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","response","use","error","console","Promise","reject","gameService","getAllGames","get","data","Error","getGameById","id","createGame","gameData","post","updateGame","put","deleteGame","delete","categoryService","getAllCategories","createCategory","categoryData"],"sources":["C:/Users/saul-/OneDrive/Escritorio/Proyecto2/gamestore-app/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Interceptor para manejar errores de red\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    console.error('API Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const gameService = {\r\n  // Obtener todos los juegos\r\n  getAllGames: async () => {\r\n    try {\r\n      const response = await api.get('/games');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Error al cargar los juegos');\r\n    }\r\n  },\r\n\r\n  // Obtener un juego específico\r\n  getGameById: async (id) => {\r\n    try {\r\n      const response = await api.get(`/games/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Error al cargar el juego');\r\n    }\r\n  },\r\n\r\n  // Crear un nuevo juego\r\n  createGame: async (gameData) => {\r\n    try {\r\n      const response = await api.post('/games', gameData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Error al crear el juego');\r\n    }\r\n  },\r\n\r\n  // Actualizar un juego\r\n  updateGame: async (id, gameData) => {\r\n    try {\r\n      const response = await api.put(`/games/${id}`, gameData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Error al actualizar el juego');\r\n    }\r\n  },\r\n\r\n  // Eliminar un juego\r\n  deleteGame: async (id) => {\r\n    try {\r\n      const response = await api.delete(`/games/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Error al eliminar el juego');\r\n    }\r\n  },\r\n};\r\n\r\nexport const categoryService = {\r\n  // Obtener todas las categorías\r\n  getAllCategories: async () => {\r\n    try {\r\n      const response = await api.get('/categories');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Error al cargar las categorías');\r\n    }\r\n  },\r\n\r\n  // Crear una nueva categoría\r\n  createCategory: async (categoryData) => {\r\n    try {\r\n      const response = await api.post('/categories', categoryData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error('Error al crear la categoría');\r\n    }\r\n  },\r\n};\r\n\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC1BD,QAAQ,IAAKA,QAAQ,EACrBE,KAAK,IAAK;EACTC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;EAClC,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMI,WAAW,GAAG;EACzB;EACAC,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAML,GAAG,CAACa,GAAG,CAAC,QAAQ,CAAC;MACxC,OAAOR,QAAQ,CAACS,IAAI;IACtB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACd,MAAM,IAAIQ,KAAK,CAAC,4BAA4B,CAAC;IAC/C;EACF,CAAC;EAED;EACAC,WAAW,EAAE,MAAOC,EAAE,IAAK;IACzB,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAML,GAAG,CAACa,GAAG,CAAC,UAAUI,EAAE,EAAE,CAAC;MAC9C,OAAOZ,QAAQ,CAACS,IAAI;IACtB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACd,MAAM,IAAIQ,KAAK,CAAC,0BAA0B,CAAC;IAC7C;EACF,CAAC;EAED;EACAG,UAAU,EAAE,MAAOC,QAAQ,IAAK;IAC9B,IAAI;MACF,MAAMd,QAAQ,GAAG,MAAML,GAAG,CAACoB,IAAI,CAAC,QAAQ,EAAED,QAAQ,CAAC;MACnD,OAAOd,QAAQ,CAACS,IAAI;IACtB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACd,MAAM,IAAIQ,KAAK,CAAC,yBAAyB,CAAC;IAC5C;EACF,CAAC;EAED;EACAM,UAAU,EAAE,MAAAA,CAAOJ,EAAE,EAAEE,QAAQ,KAAK;IAClC,IAAI;MACF,MAAMd,QAAQ,GAAG,MAAML,GAAG,CAACsB,GAAG,CAAC,UAAUL,EAAE,EAAE,EAAEE,QAAQ,CAAC;MACxD,OAAOd,QAAQ,CAACS,IAAI;IACtB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACd,MAAM,IAAIQ,KAAK,CAAC,8BAA8B,CAAC;IACjD;EACF,CAAC;EAED;EACAQ,UAAU,EAAE,MAAON,EAAE,IAAK;IACxB,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAML,GAAG,CAACwB,MAAM,CAAC,UAAUP,EAAE,EAAE,CAAC;MACjD,OAAOZ,QAAQ,CAACS,IAAI;IACtB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACd,MAAM,IAAIQ,KAAK,CAAC,4BAA4B,CAAC;IAC/C;EACF;AACF,CAAC;AAED,OAAO,MAAMU,eAAe,GAAG;EAC7B;EACAC,gBAAgB,EAAE,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMrB,QAAQ,GAAG,MAAML,GAAG,CAACa,GAAG,CAAC,aAAa,CAAC;MAC7C,OAAOR,QAAQ,CAACS,IAAI;IACtB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACd,MAAM,IAAIQ,KAAK,CAAC,gCAAgC,CAAC;IACnD;EACF,CAAC;EAED;EACAY,cAAc,EAAE,MAAOC,YAAY,IAAK;IACtC,IAAI;MACF,MAAMvB,QAAQ,GAAG,MAAML,GAAG,CAACoB,IAAI,CAAC,aAAa,EAAEQ,YAAY,CAAC;MAC5D,OAAOvB,QAAQ,CAACS,IAAI;IACtB,CAAC,CAAC,OAAOP,KAAK,EAAE;MACd,MAAM,IAAIQ,KAAK,CAAC,6BAA6B,CAAC;IAChD;EACF;AACF,CAAC;AAED,eAAef,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}